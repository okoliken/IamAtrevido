import type { PaperType, PositionY } from '../../types';
export declare type ToastPosition = PositionY | 'top-right' | 'bottom-right' | 'bottom-left' | 'top-left';
interface ToastProps {
    message: string;
    type?: PaperType;
    duration?: number;
    position?: ToastPosition;
    pauseOnHover?: boolean;
    dismissible?: boolean;
    indefinite?: boolean;
    closeAriaLabel?: string;
    onClose?: Function;
}
interface ToastMethods {
    open: (props: ToastProps | string) => void;
    info: (options: OpenWithTypeParams | string) => void;
    success: (options: OpenWithTypeParams | string) => void;
    warning: (options: OpenWithTypeParams | string) => void;
    warn: (options: OpenWithTypeParams | string) => void;
    danger: (options: OpenWithTypeParams | string) => void;
    error: (options: OpenWithTypeParams | string) => void;
}
declare type OpenWithTypeParams = Omit<ToastProps, 'type'>;
export declare function open(props: ToastProps | string): void;
export declare const info: (options: OpenWithTypeParams | string) => void;
export declare const success: (options: OpenWithTypeParams | string) => void;
export declare const warning: (options: OpenWithTypeParams | string) => void;
export declare const warn: (options: OpenWithTypeParams | string) => void;
export declare const danger: (options: OpenWithTypeParams | string) => void;
export declare const error: (options: OpenWithTypeParams | string) => void;
declare const _default: ToastMethods;
export default _default;
